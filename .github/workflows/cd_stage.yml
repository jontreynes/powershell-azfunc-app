name: 'Stage Continuous Deployment'

on:
  push:
    branches:
      - stage_config
  pull_request:
    branches:
      - stage_config

jobs:
  checks:
    name: 'Check Prerequisites'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get Build References
      run: |
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        echo "BUILD_ARTIFACT_SHA=$(jq .sha ./buildRef.json | tr -d \")" >> $GITHUB_ENV
        echo "BUILD_ARTIFACT_SHA is [${{ env.BUILD_ARTIFACT_SHA }}]"

    - name: Wait for Continuous Integration to Succeed
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-build-infra
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Generate Build Reference'
        ref: ${{ env.BUILD_ARTIFACT_SHA }}
        timeoutSeconds: 20
        intervalSeconds: 10

    # wait on continuous deployment for dev
    - name: Wait for Dev Infra Deploy to Succeed
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-dev-infra
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Deploy Dev Infra'
        ref: ${{ env.BUILD_ARTIFACT_SHA }}
        timeoutSeconds: 20
        intervalSeconds: 10

    - name: Wait for Dev App Deploy to Succeed
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-dev-app
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: 'Deploy Dev App'
        ref: ${{ env.BUILD_ARTIFACT_SHA }}
        timeoutSeconds: 20
        intervalSeconds: 10

    - name: Check if Continuous Integration Failed
      if: steps.wait-for-build-infra.outputs.conclusion != 'success' 
      run: |
        echo "Error! The Continuous Integration workflow has status of [${{steps.wait-for-build-infra.outputs.conclusion}}]" 1>&2
        exit 64
    - name: Check if Dev Infra Deploy Failed
      if: steps.wait-for-dev-infra.outputs.conclusion != 'success'
      run: |
        echo "Error! The Dev Continuous Deployment workflow has status of [${{steps.wait-for-build.outputs.conclusion}}]" 1>&2
        exit 64
    - name: Check if Dev App Deploy Failed
      if: steps.wait-for-dev-app.outputs.conclusion != 'success'
      run: |
        echo "Error! The Dev Continuous Deployment workflow has status of [${{steps.wait-for-dev-app.outputs.conclusion}}]" 1>&2
        exit 64

    - name: Check if this run is behind HEAD
      run: |

        git fetch

        # check if this branch is behind remote HEAD
        # https://stackoverflow.com/questions/17719829/check-if-local-git-repo-is-ahead-behind-remote
        function branch_status() {
          local a="stage_config" b="origin/stage_config"
          local base=$( git merge-base $a $b )
          local aref=$( git rev-parse  $a )
          local bref=$( git rev-parse  $b )

          if [[ $aref == "$bref" ]]; then
            echo up-to-date
          elif [[ $aref == "$base" ]]; then
            echo behind
          elif [[ $bref == "$base" ]]; then
            echo ahead
          else
            echo diverged
          fi
        }

        echo "The branch status is..." 
        branch_status
        
        # Stop the workflow if this run is behind HEAD
        if [ branch_states == "behind" ];
        then
          echo "Error! This an old run. Ensure this is not running from a degraded package. This may overwrite the existing environment" 1>&2
          exit 64
        fi
        
        

  terraform:
    needs: checks
    name: 'Deploy Stage Infra'
    runs-on: ubuntu-latest        # recommend using runners for separate environments (with msi on environment storage account container)
    env:
      TF_ACTION_WORKING_DIR: ./terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get Build References
      run: |
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable

        echo "BUILD_ARTIFACT_SHA=$(jq .sha ./buildRef.json | tr -d \")" >> $GITHUB_ENV
        echo "BUILD_ARTIFACT_RUN_ID=$(jq .runId ./buildRef.json | tr -d \")" >> $GITHUB_ENV

        echo "BUILD_ARTIFACT_SHA is [${{ env.BUILD_ARTIFACT_SHA }}]"
        echo "BUILD_ARTIFACT_RUN_ID is [${{ env.BUILD_ARTIFACT_RUN_ID }}]"

    - name: Download artifact package
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: ci.yaml
        run_id: ${{ env.BUILD_ARTIFACT_RUN_ID }}
        name: tf-build-package
        path: ./${{ env.TF_ACTION_WORKING_DIR }}

    - name: Login to Get KeyVault Secrets
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1.0
      with:
        keyvault: "simulationchicken"
        secrets: 'ARM-CLIENT-ID, ARM-CLIENT-SECRET, ARM-SUBSCRIPTION-ID, ARM-TENANT-ID'
      id: get_secret_action

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        working-directory: ./${{ env.TF_ACTION_WORKING_DIR }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 0.12.25


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./${{ env.TF_ACTION_WORKING_DIR }}
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./${{ env.TF_ACTION_WORKING_DIR }}
      run: |
        terraform init \
          -backend-config="client_id=${{ steps.get_secret_action.outputs.ARM-CLIENT-ID }}" \
          -backend-config="client_secret=${{ steps.get_secret_action.outputs.ARM-CLIENT-SECRET }}" \
          -backend-config="subscription_id=${{ steps.get_secret_action.outputs.ARM-SUBSCRIPTION-ID }}" \
          -backend-config="tenant_id=${{ steps.get_secret_action.outputs.ARM-TENANT-ID }}" \
          -backend-config="resource_group_name=${{ secrets.STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.STATE_STORAGE }}" \
          -backend-config="container_name=${{ secrets.STATE_CONTAINER }}" \
          -backend-config="key=stage.tfstate"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./${{ env.TF_ACTION_WORKING_DIR }}
      run: |
        terraform plan \
          -out azfunc.tfplan \
          -input=false \
          -var-file="../stage.tfvars" \
          -var="subscription_id=${{ steps.get_secret_action.outputs.ARM-SUBSCRIPTION-ID }}" \
          -var="tenant_id=${{ steps.get_secret_action.outputs.ARM-TENANT-ID }}" \
          -var="client_id=${{ steps.get_secret_action.outputs.ARM-CLIENT-ID }}" \
          -var="client_secret=${{ steps.get_secret_action.outputs.ARM-CLIENT-SECRET }}" 
    - name: Terraform Apply
      if: github.ref == 'refs/heads/stage_config' && github.event_name == 'push'
      working-directory: ./${{ env.TF_ACTION_WORKING_DIR }}
      run: |
        terraform apply -auto-approve azfunc.tfplan

  deploy_stage:
    if: github.ref == 'refs/heads/stage_config' && github.event_name == 'push'
    name: 'Deploy Stage App'
    needs: terraform
    runs-on: ubuntu-latest
    env:
      APP_WORKING_DIRECTORY: ./
      ARTIFACT_DIRECTORY: ./build/dist
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get Build References
      run: |
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        echo "BUILD_ARTIFACT_RUN_ID=$(jq .runId ./buildRef.json | tr -d \")" >> $GITHUB_ENV
        echo "BUILD_ARTIFACT_RUN_ID is [${{ env.BUILD_ARTIFACT_RUN_ID }}]"

    - name: Get Azure Function App Name
      run: |
        echo "AZURE_FUNCTION_APP_NAME=$(jq .app_name ./appName.json | tr -d \")" >> $GITHUB_ENV
        echo "AZURE_FUNCTION_APP_NAME is [${{ env.AZURE_FUNCTION_APP_NAME }}]"

    - name: Download artifact package
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: ci.yaml
        run_id: ${{ env.BUILD_ARTIFACT_RUN_ID }}
        name: app-build-package
        path: ./${{ env.ARTIFACT_DIRECTORY }}

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./${{ env.ARTIFACT_DIRECTORY }}

    - name: Login to Get KeyVault Secrets
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1.0
      with:
        keyvault: "simulationchicken"
        secrets: 'ARM-CLIENT-ID, ARM-CLIENT-SECRET, ARM-SUBSCRIPTION-ID, ARM-TENANT-ID'
      id: get_secret_action
      
    - name: Get Deploy Secrets
      run: |
        echo 'DEPLOY_CREDENTIAL<<EOF' >> $GITHUB_ENV
        echo '{' >> $GITHUB_ENV
        echo '"clientId": "${{ steps.get_secret_action.outputs.ARM-CLIENT-ID }}",'  >> $GITHUB_ENV
        echo '"clientSecret": "${{ steps.get_secret_action.outputs.ARM-CLIENT-SECRET }}",'  >> $GITHUB_ENV
        echo '"subscriptionId": "${{ steps.get_secret_action.outputs.ARM-SUBSCRIPTION-ID }}",'  >> $GITHUB_ENV
        echo '"tenantId": "${{ steps.get_secret_action.outputs.ARM-TENANT-ID }}"'  >> $GITHUB_ENV
        echo '}' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Login via Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ env.DEPLOY_CREDENTIAL }}

    - name: Azure Functions Action
      uses: Azure/functions-action@v1.1.5
      with:
        app-name: ${{ env.AZURE_FUNCTION_APP_NAME }}
        package: ./${{ env.ARTIFACT_DIRECTORY }}
        # slot-name: # optional