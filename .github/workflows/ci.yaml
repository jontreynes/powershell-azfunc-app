name: 'Continuous Integration'

on:
  push:
    branches:
    - master
    - users/**
  pull_request:
    branches:
      - master

jobs:
  package_powershell:
    name: Package PowerShell
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Stage Prep
      shell: bash
      run: |
        # prepping the Azure Function zipdeploy package
        # https://docs.microsoft.com/en-us/azure/azure-functions/deployment-zip-push

        echo "Creating a staging directory"
        mkdir build

        echo "---------------------------------------------"
        
        echo "Copying only Azure Function artifacts to the staging directory"
        rsync -av . ./build/ --exclude=.vscode --exclude=.gitignore --exclude=.terraform --exclude=.funcignore --exclude=terraform --exclude=build

        echo "---------------------------------------------"

        # output all files in staging directory
        echo "The contents of the CI Artifact is below:"
        ls -R ./build

    # Would be nice to have a pester test here

    - name: Upload Artifact PowerShell Package
      uses: actions/upload-artifact@v1
      with:
        name: build-package
        path: ./build

  package_terraform:
    name: Package Terraform
    runs-on: ubuntu-latest
    env:
      TF_ACTION_WORKING_DIR: ./terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 0.12.25
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        terraform validate

    - name: Stage Prep
      shell: bash
      run: |
        echo "Creating a staging directory"
        mkdir build

        #todo echo sha in file
        
        echo "---------------------------------------------"
        
        echo "Copying only Terraform artifacts to the staging directory"
        rsync -av ./ ./build/ --exclude=.terraform \
                              --exclude=*.tfstate \
                              --eclude=build

        echo "---------------------------------------------"

        # output all files in staging directory
        echo "The contents of the CI Artifact is below:"
        ls -R ./build

    # Would be nice to have a pester test here

    - name: Upload Artifact PowerShell Package
      uses: actions/upload-artifact@v1
      with:
        name: tf-build-package
        path: ./build